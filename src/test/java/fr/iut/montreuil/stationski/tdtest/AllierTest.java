package fr.iut.montreuil.stationski.tdtest;

import fr.iut.montreuil.stationski.Modele.Dijkstra;
import fr.iut.montreuil.stationski.Modele.DijsktraClasses.Sommet;
import fr.iut.montreuil.stationski.Modele.Ennemi;
import fr.iut.montreuil.stationski.Modele.Ennemis.SkieurBasique;
import fr.iut.montreuil.stationski.Modele.Environnement;
import fr.iut.montreuil.stationski.Modele.Terrain;
import fr.iut.montreuil.stationski.Modele.Tours.Allier;
import fr.iut.montreuil.stationski.Modele.Tours.Cahute;
import org.junit.jupiter.api.Assertions;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;


class AllierTest {

    @org.junit.jupiter.api.Test
    void créerTerrainPourAllier() {
        int[] tableauTerrain ={0,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,3,3,2,1,3,1,0,0,0,0,
                0,51,52,53,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,3,2,45,45,0,0,0,0,0,0,
                0,96,97,98,99,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,3,2,2,45,0,0,0,0,0,0,0,
                0,141,142,143,144,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,1,1,1,3,3,3,45,45,0,0,0,0,0,0,0,0,
                139,140,0,0,0,109,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,45,45,1,3,3,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,3,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,112,113,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,157,158,
                0,0,0,0,0,4,5,0,0,0,0,0,0,0,45,2,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                11,11,11,12,0,49,50,0,0,0,0,0,0,0,45,2,2,2,45,3,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,55,56,13,12,94,95,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,56,56,14,139,140,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,3,2,1,2,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,55,56,14,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,2,1,3,0,0,0,0,0,45,0,0,0,0,0,0,
                55,56,56,56,13,11,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,45,2,2,45,45,45,45,2,2,2,2,2,1,1,1,1,0,0,0,0,0,
                56,56,55,56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,0,45,45,2,2,3,2,2,2,0,0,0,0,
                56,55,56,55,56,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,3,45,2,0,0,0,0,
                56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,3,2,2,0,0,0,0,
                16,16,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,2,1,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,2,2,45,45,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,45,2,2,45,2,2,2,1,45,45,45,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,45,45,45,2,2,2,45,2,45,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,1,3,1,1,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,45,45,45,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,45,45,45,1,2,2,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,45,45,2,2,2,2,3,0,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,45,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,2,1,45,45,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,20,0,0,
                0,0,0,0,0,0,45,2,2,2,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65,0,0,
                0,0,0,0,0,45,45,2,45,1,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,110,4,5,
                0,0,0,0,0,0,0,2,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,
                0,0,0,0,0,0,0,45,45,45,45,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,95,
                0,0,0,0,0,0,0,0,0,0,45,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,140,
                0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,185,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,45,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,0,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,1,1,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,66,67,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,111,112,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,156,157,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,139,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,1,1,45,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,3,2,2,45,0,0,0,0,0,0,0,0,0,0,0};
        for(int i=0;i<tableauTerrain.length;i++){
            if(tableauTerrain[i]==0) tableauTerrain[i]=1;
            else if (tableauTerrain[i]>=1 && 3>=tableauTerrain[i] || tableauTerrain[i]==45)tableauTerrain[i]=0;
            else tableauTerrain[i]=2;
        }
        ArrayList<Integer> arrayListMap = (ArrayList<Integer>) Arrays.stream(tableauTerrain).boxed().collect(Collectors.toList());
        Environnement environnement = Environnement.getInstance(new Terrain(45, 45, new Sommet(38, 0, false), new Sommet(30, 44, false), arrayListMap));
        Cahute cahute = new Cahute(40*16, 0, environnement);
        environnement.getListeTours().add(cahute);
        Allier allier = new Allier(39*16,0,environnement,cahute);
        Terrain terrain = allier.getTerrain();

        Assertions.assertArrayEquals( environnement.getTerrain().getTerrain().toArray(),terrain.getTerrain().toArray(), "la liste de 0, 1 et 2 du terrain initial est identique à celui de l'Allié.");
    }

    @org.junit.jupiter.api.Test
    void agit() {
        int[] tableauTerrain ={0,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,3,3,2,1,3,1,0,0,0,0,
                0,51,52,53,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,3,2,45,45,0,0,0,0,0,0,
                0,96,97,98,99,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,3,2,2,45,0,0,0,0,0,0,0,
                0,141,142,143,144,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,1,1,1,3,3,3,45,45,0,0,0,0,0,0,0,0,
                139,140,0,0,0,109,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,45,45,1,3,3,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,3,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,112,113,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,157,158,
                0,0,0,0,0,4,5,0,0,0,0,0,0,0,45,2,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                11,11,11,12,0,49,50,0,0,0,0,0,0,0,45,2,2,2,45,3,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,55,56,13,12,94,95,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,56,56,14,139,140,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,3,2,1,2,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,55,56,14,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,2,1,3,0,0,0,0,0,45,0,0,0,0,0,0,
                55,56,56,56,13,11,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,45,2,2,45,45,45,45,2,2,2,2,2,1,1,1,1,0,0,0,0,0,
                56,56,55,56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,0,45,45,2,2,3,2,2,2,0,0,0,0,
                56,55,56,55,56,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,3,45,2,0,0,0,0,
                56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,3,2,2,0,0,0,0,
                16,16,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,2,1,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,2,2,45,45,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,45,2,2,45,2,2,2,1,45,45,45,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,45,45,45,2,2,2,45,2,45,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,1,3,1,1,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,45,45,45,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,45,45,45,1,2,2,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,45,45,2,2,2,2,3,0,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,45,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,2,1,45,45,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,20,0,0,
                0,0,0,0,0,0,45,2,2,2,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65,0,0,
                0,0,0,0,0,45,45,2,45,1,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,110,4,5,
                0,0,0,0,0,0,0,2,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,
                0,0,0,0,0,0,0,45,45,45,45,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,95,
                0,0,0,0,0,0,0,0,0,0,45,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,140,
                0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,185,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,45,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,0,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,1,1,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,66,67,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,111,112,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,156,157,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,139,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,1,1,45,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,3,2,2,45,0,0,0,0,0,0,0,0,0,0,0};
        for(int i=0;i<tableauTerrain.length;i++){
            if(tableauTerrain[i]==0) tableauTerrain[i]=1;
            else if (tableauTerrain[i]>=1 && 3>=tableauTerrain[i] || tableauTerrain[i]==45)tableauTerrain[i]=0;
            else tableauTerrain[i]=2;
        }
        ArrayList<Integer> arrayListMap = (ArrayList<Integer>) Arrays.stream(tableauTerrain).boxed().collect(Collectors.toList());
        Environnement environnement = Environnement.getInstance(new Terrain(45, 45, new Sommet(38, 0, false), new Sommet(30, 44, false), arrayListMap));
        Cahute cahute = new Cahute(40*16, 0, environnement);
        environnement.getListeTours().add(cahute);
        environnement.getListeAllier().remove(0);
        environnement.getListeAllier().remove(0);
        Allier allier = new Allier(39*16,0,environnement,cahute);
        environnement.getListeAllier().add(allier);
        Ennemi ennemi = new SkieurBasique(38*16, 0, environnement, new Dijkstra(environnement.getTerrain()), environnement.getVague());
        environnement.getVague().getListEnnemis().add(ennemi);
        cahute.setPV(0);
        allier.agit();

        Assertions.assertEquals(0, allier.getPV(), "la cahute est détruite, l'Allié est supprimé.");

        Environnement environnement1 = Environnement.getInstance(new Terrain(45, 45, new Sommet(38, 0, false), new Sommet(30, 44, false), arrayListMap));
        Cahute cahute1 = new Cahute(40*16, 0, environnement1);
        environnement1.getListeTours().add(cahute1);
        environnement1.getListeAllier().remove(0);
        environnement1.getListeAllier().remove(0);
        Allier allier1 = new Allier(39*16,0,environnement1,cahute1);
        environnement1.getListeAllier().add(allier1);
        Ennemi ennemi1 = new SkieurBasique(38*16, 0, environnement1, new Dijkstra(environnement1.getTerrain()), environnement1.getVague());
        environnement1.getVague().getListEnnemis().add(ennemi1);
        Assertions.assertEquals(0, environnement1.getListeProj().size(), "l'Allié n'a tiré aucun projectile.");
        for(int i=0; i<10;i++){
            environnement1.unTour();
        }
        Assertions.assertEquals(1, environnement1.getListeProj().size(), "l'Allié tire sur l'ennemi à portée, une fois tous les 10 tours de l'environnement");
        while(environnement1.getListeProj().size()>0){
            environnement1.unTour();
        }
        Assertions.assertTrue(ennemi1.estVivant(), "l'ennemi est toujours vivant après un projectile");
        for(int i=0; i<10;i++){
            environnement1.unTour();
        }
        while(environnement1.getListeProj().size()>0){
            environnement1.unTour();
        }
        Assertions.assertFalse(ennemi1.estVivant(), "l'Allié a pu tiré 2 projectiles, qui ont tué l'ennemi cible");
    }

    @org.junit.jupiter.api.Test
    void tirer() {
        int[] tableauTerrain ={0,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,3,3,2,1,3,1,0,0,0,0,
                0,51,52,53,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,3,2,45,45,0,0,0,0,0,0,
                0,96,97,98,99,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,3,2,2,45,0,0,0,0,0,0,0,
                0,141,142,143,144,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,1,1,1,3,3,3,45,45,0,0,0,0,0,0,0,0,
                139,140,0,0,0,109,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,45,45,1,3,3,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,3,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,112,113,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,157,158,
                0,0,0,0,0,4,5,0,0,0,0,0,0,0,45,2,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                11,11,11,12,0,49,50,0,0,0,0,0,0,0,45,2,2,2,45,3,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,55,56,13,12,94,95,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,56,56,14,139,140,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,3,2,1,2,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,55,56,14,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,2,1,3,0,0,0,0,0,45,0,0,0,0,0,0,
                55,56,56,56,13,11,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,45,2,2,45,45,45,45,2,2,2,2,2,1,1,1,1,0,0,0,0,0,
                56,56,55,56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,0,45,45,2,2,3,2,2,2,0,0,0,0,
                56,55,56,55,56,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,3,45,2,0,0,0,0,
                56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,3,2,2,0,0,0,0,
                16,16,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,2,1,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,2,2,45,45,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,45,2,2,45,2,2,2,1,45,45,45,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,45,45,45,2,2,2,45,2,45,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,1,3,1,1,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,45,45,45,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,45,45,45,1,2,2,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,45,45,2,2,2,2,3,0,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,45,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,2,1,45,45,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,20,0,0,
                0,0,0,0,0,0,45,2,2,2,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65,0,0,
                0,0,0,0,0,45,45,2,45,1,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,110,4,5,
                0,0,0,0,0,0,0,2,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,
                0,0,0,0,0,0,0,45,45,45,45,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,95,
                0,0,0,0,0,0,0,0,0,0,45,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,140,
                0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,185,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,45,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,0,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,1,1,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,66,67,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,111,112,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,156,157,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,139,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,1,1,45,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,3,2,2,45,0,0,0,0,0,0,0,0,0,0,0};
        for(int i=0;i<tableauTerrain.length;i++){
            if(tableauTerrain[i]==0) tableauTerrain[i]=1;
            else if (tableauTerrain[i]>=1 && 3>=tableauTerrain[i] || tableauTerrain[i]==45)tableauTerrain[i]=0;
            else tableauTerrain[i]=2;
        }
        ArrayList<Integer> arrayListMap = (ArrayList<Integer>) Arrays.stream(tableauTerrain).boxed().collect(Collectors.toList());
        Environnement environnement = Environnement.getInstance(new Terrain(45, 45, new Sommet(38, 0, false), new Sommet(30, 44, false), arrayListMap));
        Cahute cahute = new Cahute(40*16, 0, environnement);
        environnement.getListeTours().add(cahute);
        Allier allier = new Allier(39*16,0,environnement,cahute);
        environnement.getListeAllier().add(allier);
        Ennemi ennemi = new SkieurBasique(38*16, 0, environnement, new Dijkstra(environnement.getTerrain()), environnement.getVague());
        environnement.getVague().getListEnnemis().add(ennemi);
        allier.tirer();
        Assertions.assertEquals(1, environnement.getListeProj().size(), "tirer sur ennemi, projectile ajouté");
        environnement.getListeProj().remove(0);
        Ennemi ennemi2 = new SkieurBasique(35*16, 0, environnement, new Dijkstra(environnement.getTerrain()), environnement.getVague());
        environnement.getVague().getListEnnemis().add(ennemi2);
        environnement.unTour();
        Assertions.assertEquals(0, environnement.getListeProj().size(), "ennemi hors de portée, l'Allié ne tire pas, aucun projectile n'est ajouté");
    }

    @org.junit.jupiter.api.Test
    void searchEnnemi() {
        int[] tableauTerrain ={0,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,3,3,2,1,3,1,0,0,0,0,
                0,51,52,53,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,3,2,45,45,0,0,0,0,0,0,
                0,96,97,98,99,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,3,2,2,45,0,0,0,0,0,0,0,
                0,141,142,143,144,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,1,1,1,3,3,3,45,45,0,0,0,0,0,0,0,0,
                139,140,0,0,0,109,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,45,45,1,3,3,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,3,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,112,113,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,157,158,
                0,0,0,0,0,4,5,0,0,0,0,0,0,0,45,2,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                11,11,11,12,0,49,50,0,0,0,0,0,0,0,45,2,2,2,45,3,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,55,56,13,12,94,95,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,56,56,14,139,140,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,3,2,1,2,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,55,56,14,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,2,1,3,0,0,0,0,0,45,0,0,0,0,0,0,
                55,56,56,56,13,11,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,45,2,2,45,45,45,45,2,2,2,2,2,1,1,1,1,0,0,0,0,0,
                56,56,55,56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,0,45,45,2,2,3,2,2,2,0,0,0,0,
                56,55,56,55,56,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,3,45,2,0,0,0,0,
                56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,3,2,2,0,0,0,0,
                16,16,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,2,1,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,2,2,45,45,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,45,2,2,45,2,2,2,1,45,45,45,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,45,45,45,2,2,2,45,2,45,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,1,3,1,1,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,45,45,45,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,45,45,45,1,2,2,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,45,45,2,2,2,2,3,0,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,45,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,2,1,45,45,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,20,0,0,
                0,0,0,0,0,0,45,2,2,2,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65,0,0,
                0,0,0,0,0,45,45,2,45,1,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,110,4,5,
                0,0,0,0,0,0,0,2,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,
                0,0,0,0,0,0,0,45,45,45,45,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,95,
                0,0,0,0,0,0,0,0,0,0,45,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,140,
                0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,185,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,45,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,0,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,1,1,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,66,67,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,111,112,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,156,157,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,139,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,1,1,45,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,3,2,2,45,0,0,0,0,0,0,0,0,0,0,0};
        for(int i=0;i<tableauTerrain.length;i++){
            if(tableauTerrain[i]==0) tableauTerrain[i]=1;
            else if (tableauTerrain[i]>=1 && 3>=tableauTerrain[i] || tableauTerrain[i]==45)tableauTerrain[i]=0;
            else tableauTerrain[i]=2;
        }
        ArrayList<Integer> arrayListMap = (ArrayList<Integer>) Arrays.stream(tableauTerrain).boxed().collect(Collectors.toList());
        Environnement environnement = Environnement.getInstance(new Terrain(45, 45, new Sommet(38, 0, false), new Sommet(30, 44, false), arrayListMap));
        Cahute cahute = new Cahute(40*16, 0, environnement);
        environnement.getListeTours().add(cahute);
        Allier allier = new Allier(39*16,0,environnement,cahute);
        environnement.getListeAllier().add(allier);
        environnement.unTour();
        Ennemi ennemi = new SkieurBasique(38*16, 0, environnement, new Dijkstra(environnement.getTerrain()), environnement.getVague());
        environnement.getVague().getListEnnemis().add(ennemi);
        ennemi.agit();
        Assertions.assertEquals(ennemi, allier.searchEnnemi(), "vérifier que l'ennemi est bien trouvé, car il est dans la range");
    }

    @org.junit.jupiter.api.Test
    void isInRangeCahute() {
        int[] tableauTerrain ={0,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,3,3,2,1,3,1,0,0,0,0,
                0,51,52,53,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,3,2,45,45,0,0,0,0,0,0,
                0,96,97,98,99,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,3,2,2,45,0,0,0,0,0,0,0,
                0,141,142,143,144,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,1,1,1,3,3,3,45,45,0,0,0,0,0,0,0,0,
                139,140,0,0,0,109,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,45,45,1,3,3,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,3,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,112,113,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,157,158,
                0,0,0,0,0,4,5,0,0,0,0,0,0,0,45,2,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                11,11,11,12,0,49,50,0,0,0,0,0,0,0,45,2,2,2,45,3,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,55,56,13,12,94,95,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,56,56,14,139,140,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,3,2,1,2,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,55,56,14,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,2,1,3,0,0,0,0,0,45,0,0,0,0,0,0,
                55,56,56,56,13,11,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,45,2,2,45,45,45,45,2,2,2,2,2,1,1,1,1,0,0,0,0,0,
                56,56,55,56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,0,45,45,2,2,3,2,2,2,0,0,0,0,
                56,55,56,55,56,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,3,45,2,0,0,0,0,
                56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,3,2,2,0,0,0,0,
                16,16,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,2,1,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,2,2,45,45,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,45,2,2,45,2,2,2,1,45,45,45,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,45,45,45,2,2,2,45,2,45,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,1,3,1,1,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,45,45,45,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,45,45,45,1,2,2,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,45,45,2,2,2,2,3,0,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,45,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,2,1,45,45,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,20,0,0,
                0,0,0,0,0,0,45,2,2,2,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65,0,0,
                0,0,0,0,0,45,45,2,45,1,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,110,4,5,
                0,0,0,0,0,0,0,2,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,
                0,0,0,0,0,0,0,45,45,45,45,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,95,
                0,0,0,0,0,0,0,0,0,0,45,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,140,
                0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,185,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,45,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,0,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,1,1,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,66,67,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,111,112,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,156,157,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,139,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,1,1,45,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,3,2,2,45,0,0,0,0,0,0,0,0,0,0,0};
        for(int i=0;i<tableauTerrain.length;i++){
            if(tableauTerrain[i]==0) tableauTerrain[i]=1;
            else if (tableauTerrain[i]>=1 && 3>=tableauTerrain[i] || tableauTerrain[i]==45)tableauTerrain[i]=0;
            else tableauTerrain[i]=2;
        }
        ArrayList<Integer> arrayListMap = (ArrayList<Integer>) Arrays.stream(tableauTerrain).boxed().collect(Collectors.toList());
        Environnement environnement = Environnement.getInstance(new Terrain(45, 45, new Sommet(39, 0, false), new Sommet(30, 44, false), arrayListMap));
        Cahute cahute = new Cahute(42*16, 0, environnement);
        environnement.getListeTours().add(cahute);
        Allier allier = new Allier(39*16,0,environnement,cahute);
        Assertions.assertFalse(allier.isInRangeCahute(0,0,cahute.getRange()),"hors du chemin");
        Assertions.assertFalse(allier.isInRangeCahute(44*16,0, cahute.getRange()), "hors du chemin");
        Assertions.assertTrue(allier.isInRangeCahute(39*16,0, cahute.getRange()), "dans le chemin sur le skieur");
    }

    @org.junit.jupiter.api.Test
    void isInRange() {
        int[] tableauTerrain ={0,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,3,3,2,1,3,1,0,0,0,0,
                0,51,52,53,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,3,2,45,45,0,0,0,0,0,0,
                0,96,97,98,99,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,3,2,2,45,0,0,0,0,0,0,0,
                0,141,142,143,144,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,1,1,1,3,3,3,45,45,0,0,0,0,0,0,0,0,
                139,140,0,0,0,109,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,45,45,1,3,3,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,3,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,112,113,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,157,158,
                0,0,0,0,0,4,5,0,0,0,0,0,0,0,45,2,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                11,11,11,12,0,49,50,0,0,0,0,0,0,0,45,2,2,2,45,3,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,55,56,13,12,94,95,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,56,56,14,139,140,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,3,2,1,2,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,55,56,14,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,2,1,3,0,0,0,0,0,45,0,0,0,0,0,0,
                55,56,56,56,13,11,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,45,2,2,45,45,45,45,2,2,2,2,2,1,1,1,1,0,0,0,0,0,
                56,56,55,56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,0,45,45,2,2,3,2,2,2,0,0,0,0,
                56,55,56,55,56,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,3,45,2,0,0,0,0,
                56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,3,2,2,0,0,0,0,
                16,16,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,2,1,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,2,2,45,45,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,45,2,2,45,2,2,2,1,45,45,45,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,45,45,45,2,2,2,45,2,45,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,1,3,1,1,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,45,45,45,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,45,45,45,1,2,2,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,45,45,2,2,2,2,3,0,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,45,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,2,1,45,45,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,20,0,0,
                0,0,0,0,0,0,45,2,2,2,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65,0,0,
                0,0,0,0,0,45,45,2,45,1,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,110,4,5,
                0,0,0,0,0,0,0,2,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,
                0,0,0,0,0,0,0,45,45,45,45,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,95,
                0,0,0,0,0,0,0,0,0,0,45,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,140,
                0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,185,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,45,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,0,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,1,1,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,66,67,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,111,112,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,156,157,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,139,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,1,1,45,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,3,2,2,45,0,0,0,0,0,0,0,0,0,0,0};
        for(int i=0;i<tableauTerrain.length;i++){
            if(tableauTerrain[i]==0) tableauTerrain[i]=1;
            else if (tableauTerrain[i]>=1 && 3>=tableauTerrain[i] || tableauTerrain[i]==45)tableauTerrain[i]=0;
            else tableauTerrain[i]=2;
        }
        ArrayList<Integer> arrayListMap = (ArrayList<Integer>) Arrays.stream(tableauTerrain).boxed().collect(Collectors.toList());
        Environnement environnement = Environnement.getInstance(new Terrain(45, 45, new Sommet(39, 0, false), new Sommet(30, 44, false), arrayListMap));
        Cahute cahute = new Cahute(42*16, 0, environnement);
        environnement.getListeTours().add(cahute);
        Allier allier = new Allier(39*16,0,environnement,cahute);

        Assertions.assertFalse(allier.isInRangeCahute(704,0,cahute.getRange()),"hors portée");
        Assertions.assertFalse(allier.isInRange(1*16,16, cahute.getRange()), "hors portée");
        Assertions.assertTrue(allier.isInRange(40*16,0, cahute.getRange()), "dans sa range à droite");
        Assertions.assertTrue(allier.isInRange(38*16,0, cahute.getRange()), "dans sa range à gauche");
        Assertions.assertTrue(allier.isInRange(39*16,16, cahute.getRange()), "dans sa range en bas");

    }

    @org.junit.jupiter.api.Test
    void avancer() {
        int[] tableauTerrain ={0,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,3,3,2,1,3,1,0,0,0,0,
                0,51,52,53,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,3,2,45,45,0,0,0,0,0,0,
                0,96,97,98,99,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,3,2,2,45,0,0,0,0,0,0,0,
                0,141,142,143,144,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,1,1,1,3,3,3,45,45,0,0,0,0,0,0,0,0,
                139,140,0,0,0,109,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,45,45,1,3,3,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,3,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,112,113,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,157,158,
                0,0,0,0,0,4,5,0,0,0,0,0,0,0,45,2,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                11,11,11,12,0,49,50,0,0,0,0,0,0,0,45,2,2,2,45,3,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,55,56,13,12,94,95,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,56,56,14,139,140,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,3,2,1,2,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,55,56,14,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,2,1,3,0,0,0,0,0,45,0,0,0,0,0,0,
                55,56,56,56,13,11,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,45,2,2,45,45,45,45,2,2,2,2,2,1,1,1,1,0,0,0,0,0,
                56,56,55,56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,0,45,45,2,2,3,2,2,2,0,0,0,0,
                56,55,56,55,56,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,3,45,2,0,0,0,0,
                56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,3,2,2,0,0,0,0,
                16,16,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,2,1,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,2,2,45,45,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,45,2,2,45,2,2,2,1,45,45,45,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,45,45,45,2,2,2,45,2,45,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,1,3,1,1,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,45,45,45,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,45,45,45,1,2,2,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,45,45,2,2,2,2,3,0,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,45,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,2,1,45,45,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,20,0,0,
                0,0,0,0,0,0,45,2,2,2,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65,0,0,
                0,0,0,0,0,45,45,2,45,1,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,110,4,5,
                0,0,0,0,0,0,0,2,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,
                0,0,0,0,0,0,0,45,45,45,45,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,95,
                0,0,0,0,0,0,0,0,0,0,45,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,140,
                0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,185,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,45,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,0,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,1,1,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,66,67,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,111,112,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,156,157,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,139,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,1,1,45,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,3,2,2,45,0,0,0,0,0,0,0,0,0,0,0};
        for(int i=0;i<tableauTerrain.length;i++){
            if(tableauTerrain[i]==0) tableauTerrain[i]=1;
            else if (tableauTerrain[i]>=1 && 3>=tableauTerrain[i] || tableauTerrain[i]==45)tableauTerrain[i]=0;
            else tableauTerrain[i]=2;
        }
        ArrayList<Integer> arrayListMap = (ArrayList<Integer>) Arrays.stream(tableauTerrain).boxed().collect(Collectors.toList());
        Environnement environnement = Environnement.getInstance(new Terrain(45, 45, new Sommet(39, 0, false), new Sommet(30, 44, false), arrayListMap));
        Cahute cahute = new Cahute(42*16, 0, environnement);
        environnement.getListeTours().add(cahute);
        Allier allier = new Allier(39*16,0,environnement,cahute);
        Allier allier2 = new Allier(39*16, 0 , environnement, cahute);
        allier.agit();
        Assertions.assertTrue(distance(allier, allier2), "vérifier que l'allier s'est simplement déplacer d'une distance de 1 pixel maximum");

    }
    boolean distance(Allier allier, Allier allier2){
        return (Math.abs(allier.getPosX()-allier2.getPosX())<=1 && Math.abs(allier.getPosY()-allier2.getPosY())<=1);
    }
    @org.junit.jupiter.api.Test
    void renouvelerTerrain() {
        int[] tableauTerrain ={0,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,3,3,2,1,3,1,0,0,0,0,
                0,51,52,53,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,3,2,45,45,0,0,0,0,0,0,
                0,96,97,98,99,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,3,2,2,45,0,0,0,0,0,0,0,
                0,141,142,143,144,64,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,1,1,1,3,3,3,45,45,0,0,0,0,0,0,0,0,
                139,140,0,0,0,109,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,45,45,1,3,3,3,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,
                184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,1,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,67,68,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,3,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,112,113,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,3,45,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,157,158,
                0,0,0,0,0,4,5,0,0,0,0,0,0,0,45,2,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                11,11,11,12,0,49,50,0,0,0,0,0,0,0,45,2,2,2,45,3,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,55,56,13,12,94,95,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,56,56,14,139,140,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,3,2,1,2,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                56,56,55,56,14,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,2,1,3,0,0,0,0,0,45,0,0,0,0,0,0,
                55,56,56,56,13,11,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,45,2,2,45,45,45,45,2,2,2,2,2,1,1,1,1,0,0,0,0,0,
                56,56,55,56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,0,45,45,2,2,3,2,2,2,0,0,0,0,
                56,55,56,55,56,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,45,45,3,45,2,0,0,0,0,
                56,55,56,56,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,3,2,2,0,0,0,0,
                16,16,16,16,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,2,1,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,2,2,45,45,45,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,45,2,2,45,2,2,2,1,45,45,45,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,45,45,45,2,2,2,45,2,45,2,2,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,1,3,1,1,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,2,2,2,2,2,2,45,45,45,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,45,45,45,1,2,2,2,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,45,45,2,2,2,2,3,0,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,45,2,2,2,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,45,2,1,45,45,0,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,20,0,0,
                0,0,0,0,0,0,45,2,2,2,2,3,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65,0,0,
                0,0,0,0,0,45,45,2,45,1,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,110,4,5,
                0,0,0,0,0,0,0,2,2,2,2,2,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,50,
                0,0,0,0,0,0,0,45,45,45,45,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,95,
                0,0,0,0,0,0,0,0,0,0,45,2,2,2,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,140,
                0,0,0,0,0,0,0,0,0,0,45,45,2,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,185,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,1,2,2,2,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,45,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,45,2,2,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,2,2,0,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,2,1,1,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,66,67,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,2,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,111,112,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,1,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,156,157,158,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,3,2,45,45,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,139,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,45,3,1,1,45,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,184,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,45,45,3,2,2,45,0,0,0,0,0,0,0,0,0,0,0};
        for(int i=0;i<tableauTerrain.length;i++){
            if(tableauTerrain[i]==0) tableauTerrain[i]=1;
            else if (tableauTerrain[i]>=1 && 3>=tableauTerrain[i] || tableauTerrain[i]==45)tableauTerrain[i]=0;
            else tableauTerrain[i]=2;
        }
        ArrayList<Integer> arrayListMap = (ArrayList<Integer>) Arrays.stream(tableauTerrain).boxed().collect(Collectors.toList());
        Environnement environnement = Environnement.getInstance(new Terrain(45, 45, new Sommet(39, 0, false), new Sommet(30, 44, false), arrayListMap));
        Cahute cahute = new Cahute(42*16, 0, environnement);
        environnement.getListeTours().add(cahute);
        Allier allier = new Allier(39*16,0,environnement,cahute);
        allier.agit();

        Assertions.assertFalse(terrainIdentique(environnement.getTerrain(), allier.getTerrain()), "sommet cible et sommet source du terrain de l'allier diffÃ©rents de ceux du terrain de l'environnement");

    }
    boolean terrainIdentique(Terrain terrain, Terrain terrain2){
        return (terrain.getCible().getX()==terrain2.getCible().getX() && terrain.getCible().getY()==terrain2.getCible().getY() && terrain.getSource().getX()==terrain2.getSource().getX() && terrain.getSource().getY()==terrain2.getSource().getY());
    }

}

